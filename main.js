(()=>{"use strict";const e=e=>{if(e<=0)throw new Error("The minimum length must be 1");let o=0,n=e;return{getLength:()=>n,getHits:()=>o,hit:function(){o!==n&&o++},isSunk:function(){return o===n}}},o=(o=10)=>{let n=[],t=[];for(let e=0;e<o;e++){let e=new Array(o).fill(null);n.push(e)}return{getBoard:()=>n,placeShipHorizontally:function(r,l,i){if(r<0||r>o-1||l+i>o||l<0||l>o-1)throw new Error("The ship goes beyond the limits");let h=e(i),s=[];for(let e=0;e<i;e++)s.push(n[r][l+e]);if(!s.every((e=>null===e)))throw s=[],new Error("The ship touches another ship");for(let e=0;e<i;e++)n[r][l+e]=h;t.push(h),s=[]},placeShipVertically:function(r,l,i){if(r<0||r>o-1||r+i>o||l<0||l>o-1)throw new Error("The ship goes beyond the limits");let h=e(i),s=[];for(let e=0;e<i;e++)s.push(n[r+e][l]);if(!s.every((e=>null===e)))throw s=[],new Error("The ship touches another ship");for(let e=0;e<i;e++)n[r+e][l]=h;t.push(h),s=[]},receiveAttack:function(e,o){if(null===n[e][o])return n[e][o]=!1,"Oops.. nothing has been hit";if(!1===n[e][o])throw new Error("This spot has already been hit ");return n[e][o].hit(),n[e][o]=!1,"A ship has been hit!"},getShips:()=>t,allShipsSunk:function(){return t.every((e=>!0===e.isSunk()))}}},n=((e="Player 1",n="Computer")=>{const t=o();t.name=e;const r=o();return r.name=n,[t,r]})();let t=n[0];function r(){t=t===n[0]?n[1]:n[0],console.log(t.name)}console.log(n),console.log(t.name),console.log(r()),console.log(r()),console.log(r()),console.log(r()),console.log(r()),console.log(r()),console.log(r())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,